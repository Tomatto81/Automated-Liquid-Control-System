
AVRASM ver. 2.1.30  C:\Users\ASUS\OneDrive\Documents\1 persiapan interview materials\Automated-Liquid-Control-System\Firmware\Debug\List\ATMega_Proses_Control.asm Sun May 11 00:02:19 2025

C:\Users\ASUS\OneDrive\Documents\1 persiapan interview materials\Automated-Liquid-Control-System\Firmware\Debug\List\ATMega_Proses_Control.asm(1090): warning: Register r5 already defined by the .DEF directive
C:\Users\ASUS\OneDrive\Documents\1 persiapan interview materials\Automated-Liquid-Control-System\Firmware\Debug\List\ATMega_Proses_Control.asm(1091): warning: Register r4 already defined by the .DEF directive
C:\Users\ASUS\OneDrive\Documents\1 persiapan interview materials\Automated-Liquid-Control-System\Firmware\Debug\List\ATMega_Proses_Control.asm(1092): warning: Register r7 already defined by the .DEF directive
C:\Users\ASUS\OneDrive\Documents\1 persiapan interview materials\Automated-Liquid-Control-System\Firmware\Debug\List\ATMega_Proses_Control.asm(1093): warning: Register r6 already defined by the .DEF directive
C:\Users\ASUS\OneDrive\Documents\1 persiapan interview materials\Automated-Liquid-Control-System\Firmware\Debug\List\ATMega_Proses_Control.asm(1094): warning: Register r9 already defined by the .DEF directive
C:\Users\ASUS\OneDrive\Documents\1 persiapan interview materials\Automated-Liquid-Control-System\Firmware\Debug\List\ATMega_Proses_Control.asm(1095): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128
                 ;Program type           : Application
                 ;Clock frequency        : 10,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _add=R5
                 	.DEF _start=R4
                 	.DEF _shutdown=R7
                 	.DEF __lcd_x=R6
                 	.DEF __lcd_y=R9
                 	.DEF __lcd_maxx=R8
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0073 	JMP  __RESET
000002 940c 00a3 	JMP  _ext_int0_isr
000004 940c 00a7 	JMP  _ext_int1_isr
000006 940c 00ac 	JMP  _ext_int2_isr
000008 940c 00b0 	JMP  _ext_int3_isr
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
00004f 6953
000050 6c6b
000051 7375
000052 3a20      	.DB  0x53,0x69,0x6B,0x6C,0x75,0x73,0x20,0x3A
000053 2520
000054 0064
000055 7349
000056 2069      	.DB  0x20,0x25,0x64,0x0,0x49,0x73,0x69,0x20
000057 6154
000058 6b6e
000059 4200
00005a 4552      	.DB  0x54,0x61,0x6E,0x6B,0x0,0x42,0x52,0x45
00005b 4b41
00005c 0021
00005d 6441
00005e 6b75      	.DB  0x41,0x4B,0x21,0x0,0x41,0x64,0x75,0x6B
00005f 4200
000060 6175
000061 676e
000062 4900      	.DB  0x0,0x42,0x75,0x61,0x6E,0x67,0x0,0x49
000063 7473
000064 7269
000065 6861
000066 7461      	.DB  0x73,0x74,0x69,0x72,0x61,0x68,0x61,0x74
000067 4500
000068 656d
000069 6772
00006a 6e65      	.DB  0x0,0x45,0x6D,0x65,0x72,0x67,0x65,0x6E
00006b 7963
00006c 2121
00006d 0021      	.DB  0x63,0x79,0x21,0x21,0x21,0x0
                 _0x2020003:
00006e c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00006f 0002      	.DW  0x02
000070 0500      	.DW  __base_y_G101
000071 00dc      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000072 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000073 94f8      	CLI
000074 27ee      	CLR  R30
000075 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000076 e0f1      	LDI  R31,1
000077 bff5      	OUT  MCUCR,R31
000078 bfe5      	OUT  MCUCR,R30
000079 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
00007b e08d      	LDI  R24,(14-2)+1
00007c e0a2      	LDI  R26,2
00007d 27bb      	CLR  R27
                 __CLEAR_REG:
00007e 93ed      	ST   X+,R30
00007f 958a      	DEC  R24
000080 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000081 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000082 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000083 e0a0      	LDI  R26,LOW(__SRAM_START)
000084 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000085 93ed      	ST   X+,R30
000086 9701      	SBIW R24,1
000087 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000088 edee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000089 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00008a 9185      	LPM  R24,Z+
00008b 9195      	LPM  R25,Z+
00008c 9700      	SBIW R24,0
00008d f061      	BREQ __GLOBAL_INI_END
00008e 91a5      	LPM  R26,Z+
00008f 91b5      	LPM  R27,Z+
000090 9005      	LPM  R0,Z+
000091 9015      	LPM  R1,Z+
000092 01bf      	MOVW R22,R30
000093 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000094 9005      	LPM  R0,Z+
000095 920d      	ST   X+,R0
000096 9701      	SBIW R24,1
000097 f7e1      	BRNE __GLOBAL_INI_LOOP
000098 01fb      	MOVW R30,R22
000099 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
00009a bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00009b efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00009c bfed      	OUT  SPL,R30
00009d e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00009e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00009f e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000a0 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000a1 940c 00b6 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*******************************************************
                 ;Chip type               : ATmega128
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 10,000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 1024
                 ;*******************************************************/
                 ;
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;unsigned char add, start, shutdown;
                 ;
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0016 {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
0000a3 93ea      	ST   -Y,R30
0000a4 b7ef      	IN   R30,SREG
                 ; 0000 0017 // Place your code here
                 ; 0000 0018 shutdown=0;
0000a5 2477      	CLR  R7
                 ; 0000 0019 }
0000a6 c00c      	RJMP _0x30
                 ; .FEND
                 ;
                 ;// External Interrupt 1 service routine
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 001D {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
0000a7 93ea      	ST   -Y,R30
                 ; 0000 001E // Place your code here
                 ; 0000 001F start=1;
0000a8 e0e1      	LDI  R30,LOW(1)
0000a9 2e4e      	MOV  R4,R30
                 ; 0000 0020 }
0000aa 91e9      	LD   R30,Y+
0000ab 9518      	RETI
                 ; .FEND
                 ;
                 ;// External Interrupt 2 service routine
                 ;interrupt [EXT_INT2] void ext_int2_isr(void)
                 ; 0000 0024 {
                 _ext_int2_isr:
                 ; .FSTART _ext_int2_isr
0000ac 93ea      	ST   -Y,R30
0000ad b7ef      	IN   R30,SREG
                 ; 0000 0025 // Place your code here
                 ; 0000 0026 add+=1;
0000ae 9453      	INC  R5
                 ; 0000 0027 }
0000af c003      	RJMP _0x30
                 ; .FEND
                 ;
                 ;// External Interrupt 3 service routine
                 ;interrupt [EXT_INT3] void ext_int3_isr(void)
                 ; 0000 002B {
                 _ext_int3_isr:
                 ; .FSTART _ext_int3_isr
0000b0 93ea      	ST   -Y,R30
0000b1 b7ef      	IN   R30,SREG
                 ; 0000 002C // Place your code here
                 ; 0000 002D add=0;
0000b2 2455      	CLR  R5
                 ; 0000 002E }
                 _0x30:
0000b3 bfef      	OUT  SREG,R30
0000b4 91e9      	LD   R30,Y+
0000b5 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0031 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0032 // Declare your local variables here
                 ; 0000 0033 unsigned char text[16];
                 ; 0000 0034 
                 ; 0000 0035 // Input/Output Ports initialization
                 ; 0000 0036 // Port A initialization
                 ; 0000 0037 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0038 DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
0000b6 9760      	SBIW R28,16
                 ;	text -> Y+0
0000b7 efef      	LDI  R30,LOW(255)
0000b8 bbea      	OUT  0x1A,R30
                 ; 0000 0039 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=1 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 003A PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (1<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000b9 e1e0      	LDI  R30,LOW(16)
0000ba bbeb      	OUT  0x1B,R30
                 ; 0000 003B 
                 ; 0000 003C // Port C initialization
                 ; 0000 003D // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 003E DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
0000bb efef      	LDI  R30,LOW(255)
0000bc bbe4      	OUT  0x14,R30
                 ; 0000 003F // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0040 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000bd e0e0      	LDI  R30,LOW(0)
0000be bbe5      	OUT  0x15,R30
                 ; 0000 0041 
                 ; 0000 0042 // Port D initialization
                 ; 0000 0043 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0044 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000bf bbe1      	OUT  0x11,R30
                 ; 0000 0045 // State: Bit7=T Bit6=T Bit5=T Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
                 ; 0000 0046 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
0000c0 e1ef      	LDI  R30,LOW(31)
0000c1 bbe2      	OUT  0x12,R30
                 ; 0000 0047 
                 ; 0000 0048 // Port E initialization
                 ; 0000 0049 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 004A DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (0<<DDE1) | (0<<DDF0);
0000c2 e0e0      	LDI  R30,LOW(0)
0000c3 b9e2      	OUT  0x2,R30
                 ; 0000 004B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=P Bit1=P Bit0=P
                 ; 0000 004C PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (1<<PORTE2) | (1<<PORTE1) | (1<<PORTE0);
0000c4 e0e7      	LDI  R30,LOW(7)
0000c5 b9e3      	OUT  0x3,R30
                 ; 0000 004D 
                 ; 0000 004E // External Interrupt(s) initialization
                 ; 0000 004F // INT0: On
                 ; 0000 0050 // INT0 Mode: Falling Edge
                 ; 0000 0051 // INT1: On
                 ; 0000 0052 // INT1 Mode: Falling Edge
                 ; 0000 0053 // INT2: On
                 ; 0000 0054 // INT2 Mode: Falling Edge
                 ; 0000 0055 // INT3: On
                 ; 0000 0056 // INT3 Mode: Falling Edge
                 ; 0000 0057 EICRA=(1<<ISC31) | (0<<ISC30) | (1<<ISC21) | (0<<ISC20) | (1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
0000c6 eaea      	LDI  R30,LOW(170)
0000c7 93e0 006a 	STS  106,R30
                 ; 0000 0058 EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
0000c9 e0e0      	LDI  R30,LOW(0)
0000ca bfea      	OUT  0x3A,R30
                 ; 0000 0059 EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (1<<INT3) | (1<<INT2) | (1<<INT1) | (1<<INT0);
0000cb e0ef      	LDI  R30,LOW(15)
0000cc bfe9      	OUT  0x39,R30
                 ; 0000 005A EIFR=(0<<INTF7) | (0<<INTF6) | (0<<INTF5) | (0<<INTF4) | (1<<INTF3) | (1<<INTF2) | (1<<INTF1) | (1<<INTF0);
0000cd bfe8      	OUT  0x38,R30
                 ; 0000 005B 
                 ; 0000 005C // Alphanumeric LCD initialization
                 ; 0000 005D // Connections are specified in the
                 ; 0000 005E // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 005F // RS - PORTC Bit 0
                 ; 0000 0060 // RD - PORTC Bit 2
                 ; 0000 0061 // EN - PORTC Bit 1
                 ; 0000 0062 // D4 - PORTC Bit 4
                 ; 0000 0063 // D5 - PORTC Bit 5
                 ; 0000 0064 // D6 - PORTC Bit 6
                 ; 0000 0065 // D7 - PORTC Bit 7
                 ; 0000 0066 // Characters/line: 16
                 ; 0000 0067 lcd_init(16);
0000ce e1a0      	LDI  R26,LOW(16)
0000cf 940e 038a 	CALL _lcd_init
                 ; 0000 0068 
                 ; 0000 0069 // Global enable interrupts
                 ; 0000 006A #asm("sei")
0000d1 9478      	sei
                 ; 0000 006B start=0;
0000d2 2444      	CLR  R4
                 ; 0000 006C 
                 ; 0000 006D while (1)
                 ; 0000 006E       {
                 ; 0000 006F       // Place your code here
                 ; 0000 0070       cycle:
                 _0x6:
                 ; 0000 0071       while(start==0)
0000d3 2044      	TST  R4
0000d4 f429      	BRNE _0x9
                 ; 0000 0072         {
                 ; 0000 0073         PORTA=0b00010000;
0000d5 e1e0      	LDI  R30,LOW(16)
0000d6 bbeb      	OUT  0x1B,R30
                 ; 0000 0074         sprintf(text,"Siklus : %d",add);
0000d7 940e 03d1 	CALL SUBOPT_0x0
                 ; 0000 0075         lcd_gotoxy(0,0);
                 ; 0000 0076         lcd_puts(text);
                 ; 0000 0077         goto cycle;
0000d9 cff9      	RJMP _0x6
                 ; 0000 0078         }
                 _0x9:
                 ; 0000 0079 
                 ; 0000 007A       if(add==0)
0000da 2055      	TST  R5
0000db f411      	BRNE _0xA
                 ; 0000 007B         {
                 ; 0000 007C         start=0;
0000dc 2444      	CLR  R4
                 ; 0000 007D         goto cycle;
0000dd cff5      	RJMP _0x6
                 ; 0000 007E         }
                 ; 0000 007F 
                 ; 0000 0080       else if(add>=1)
                 _0xA:
0000de e0e1      	LDI  R30,LOW(1)
0000df 165e      	CP   R5,R30
0000e0 f018      	BRLO _0xC
                 ; 0000 0081         {
                 ; 0000 0082         shutdown=1;
0000e1 2e7e      	MOV  R7,R30
                 ; 0000 0083         lcd_clear();
0000e2 940e 0347 	CALL _lcd_clear
                 ; 0000 0084         goto inflow;
                 ; 0000 0085         }
                 ; 0000 0086 
                 ; 0000 0087       inflow:
                 _0xC:
                 _0xD:
                 ; 0000 0088       start=0;
0000e4 2444      	CLR  R4
                 ; 0000 0089       sprintf(text,"Siklus : %d",add);
0000e5 940e 03d1 	CALL SUBOPT_0x0
                 ; 0000 008A       lcd_gotoxy(0,0);
                 ; 0000 008B       lcd_puts(text);
                 ; 0000 008C       lcd_gotoxy(0,1);
0000e7 940e 03ea 	CALL SUBOPT_0x1
                 ; 0000 008D       lcd_putsf("Isi Tank");
                +
0000e9 eaaa     +LDI R26 , LOW ( 2 * _0x0 + ( 12 ) )
0000ea e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW2FN _0x0,12
0000eb 940e 0377 	CALL _lcd_putsf
                 ; 0000 008E       PORTA=0b00010011;
0000ed e1e3      	LDI  R30,LOW(19)
0000ee bbeb      	OUT  0x1B,R30
                 ; 0000 008F       if(shutdown==0)
0000ef 2077      	TST  R7
0000f0 f419      	BRNE _0xE
                 ; 0000 0090         {
                 ; 0000 0091         lcd_clear();
0000f1 940e 0347 	CALL _lcd_clear
                 ; 0000 0092         goto emergency;
0000f3 c071      	RJMP _0xF
                 ; 0000 0093         }
                 ; 0000 0094 
                 ; 0000 0095       else if(start==1)
                 _0xE:
0000f4 e0e1      	LDI  R30,LOW(1)
0000f5 15e4      	CP   R30,R4
0000f6 f449      	BRNE _0x11
                 ; 0000 0096         {
                 ; 0000 0097         start=0;
0000f7 940e 03ef 	CALL SUBOPT_0x2
                 ; 0000 0098         PORTA=0b00010000;
                 ; 0000 0099         lcd_clear();
                 ; 0000 009A         lcd_gotoxy(0,0);
                 ; 0000 009B         lcd_putsf("BREAK!");
                 ; 0000 009C         loop1:
                 _0x12:
                 ; 0000 009D         if(start==1)
0000f9 e0e1      	LDI  R30,LOW(1)
0000fa 15e4      	CP   R30,R4
0000fb f419      	BRNE _0x13
                 ; 0000 009E             {
                 ; 0000 009F             lcd_clear();
0000fc 940e 0347 	CALL _lcd_clear
                 ; 0000 00A0             goto inflow;
0000fe cfe5      	RJMP _0xD
                 ; 0000 00A1             }
                 ; 0000 00A2         goto loop1;
                 _0x13:
0000ff cff9      	RJMP _0x12
                 ; 0000 00A3         }
                 ; 0000 00A4 
                 ; 0000 00A5       else if(PINE.2==1)
                 _0x11:
000100 9b0a      	SBIS 0x1,2
000101 c003      	RJMP _0x15
                 ; 0000 00A6         {
                 ; 0000 00A7         lcd_clear();
000102 940e 0347 	CALL _lcd_clear
                 ; 0000 00A8         goto htr_stir;
000104 c001      	RJMP _0x16
                 ; 0000 00A9         }
                 ; 0000 00AA 
                 ; 0000 00AB       else
                 _0x15:
                 ; 0000 00AC         {
                 ; 0000 00AD         goto inflow;
000105 cfde      	RJMP _0xD
                 ; 0000 00AE         }
                 ; 0000 00AF 
                 ; 0000 00B0       htr_stir:
                 _0x16:
                 ; 0000 00B1       start=0;
000106 2444      	CLR  R4
                 ; 0000 00B2       sprintf(text,"Siklus : %d",add);
000107 940e 03d1 	CALL SUBOPT_0x0
                 ; 0000 00B3       lcd_gotoxy(0,0);
                 ; 0000 00B4       lcd_puts(text);
                 ; 0000 00B5       lcd_gotoxy(0,1);
000109 940e 03ea 	CALL SUBOPT_0x1
                 ; 0000 00B6       lcd_putsf("Aduk");
                +
00010b ebaa     +LDI R26 , LOW ( 2 * _0x0 + ( 28 ) )
00010c e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 28 ) )
                 	__POINTW2FN _0x0,28
00010d 940e 0377 	CALL _lcd_putsf
                 ; 0000 00B7       PORTA=0b00001000;
00010f e0e8      	LDI  R30,LOW(8)
000110 bbeb      	OUT  0x1B,R30
                 ; 0000 00B8       if(shutdown==0)
000111 2077      	TST  R7
000112 f419      	BRNE _0x18
                 ; 0000 00B9         {
                 ; 0000 00BA         lcd_clear();
000113 940e 0347 	CALL _lcd_clear
                 ; 0000 00BB         goto emergency;
000115 c04f      	RJMP _0xF
                 ; 0000 00BC         }
                 ; 0000 00BD 
                 ; 0000 00BE       else if(start==1)
                 _0x18:
000116 e0e1      	LDI  R30,LOW(1)
000117 15e4      	CP   R30,R4
000118 f449      	BRNE _0x1A
                 ; 0000 00BF         {
                 ; 0000 00C0         start=0;
000119 940e 03ef 	CALL SUBOPT_0x2
                 ; 0000 00C1         PORTA=0b00010000;
                 ; 0000 00C2         lcd_clear();
                 ; 0000 00C3         lcd_gotoxy(0,0);
                 ; 0000 00C4         lcd_putsf("BREAK!");
                 ; 0000 00C5         loop2:
                 _0x1B:
                 ; 0000 00C6         if(start==1)
00011b e0e1      	LDI  R30,LOW(1)
00011c 15e4      	CP   R30,R4
00011d f419      	BRNE _0x1C
                 ; 0000 00C7             {
                 ; 0000 00C8             lcd_clear();
00011e 940e 0347 	CALL _lcd_clear
                 ; 0000 00C9             goto htr_stir;
000120 cfe5      	RJMP _0x16
                 ; 0000 00CA             }
                 ; 0000 00CB         goto loop2;
                 _0x1C:
000121 cff9      	RJMP _0x1B
                 ; 0000 00CC         }
                 ; 0000 00CD 
                 ; 0000 00CE       else if(PINE.1==0)
                 _0x1A:
000122 9909      	SBIC 0x1,1
000123 c003      	RJMP _0x1E
                 ; 0000 00CF         {
                 ; 0000 00D0         lcd_clear();
000124 940e 0347 	CALL _lcd_clear
                 ; 0000 00D1         goto outflow;
000126 c001      	RJMP _0x1F
                 ; 0000 00D2         }
                 ; 0000 00D3 
                 ; 0000 00D4       else
                 _0x1E:
                 ; 0000 00D5         {
                 ; 0000 00D6         goto htr_stir;
000127 cfde      	RJMP _0x16
                 ; 0000 00D7         }
                 ; 0000 00D8 
                 ; 0000 00D9       outflow:
                 _0x1F:
                 ; 0000 00DA       start=0;
000128 2444      	CLR  R4
                 ; 0000 00DB       sprintf(text,"Siklus : %d",add);
000129 940e 03d1 	CALL SUBOPT_0x0
                 ; 0000 00DC       lcd_gotoxy(0,0);
                 ; 0000 00DD       lcd_puts(text);
                 ; 0000 00DE       lcd_gotoxy(0,1);
00012b 940e 03ea 	CALL SUBOPT_0x1
                 ; 0000 00DF       lcd_putsf("Buang");
                +
00012d ebaf     +LDI R26 , LOW ( 2 * _0x0 + ( 33 ) )
00012e e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 33 ) )
                 	__POINTW2FN _0x0,33
00012f 940e 0377 	CALL _lcd_putsf
                 ; 0000 00E0       PORTA=0b00010100;
000131 e1e4      	LDI  R30,LOW(20)
000132 bbeb      	OUT  0x1B,R30
                 ; 0000 00E1       if(shutdown==0)
000133 2077      	TST  R7
000134 f419      	BRNE _0x21
                 ; 0000 00E2         {
                 ; 0000 00E3         lcd_clear();
000135 940e 0347 	CALL _lcd_clear
                 ; 0000 00E4         goto emergency;
000137 c02d      	RJMP _0xF
                 ; 0000 00E5         }
                 ; 0000 00E6 
                 ; 0000 00E7       else if(start==1)
                 _0x21:
000138 e0e1      	LDI  R30,LOW(1)
000139 15e4      	CP   R30,R4
00013a f4a9      	BRNE _0x23
                 ; 0000 00E8         {
                 ; 0000 00E9         start=0;
00013b 2444      	CLR  R4
                 ; 0000 00EA         PORTA=0b00010000;
00013c e1e0      	LDI  R30,LOW(16)
00013d bbeb      	OUT  0x1B,R30
                 ; 0000 00EB         lcd_clear();
00013e 940e 0347 	CALL _lcd_clear
                 ; 0000 00EC         lcd_gotoxy(0,0);
000140 e0e0      	LDI  R30,LOW(0)
000141 93ea      	ST   -Y,R30
000142 e0a0      	LDI  R26,LOW(0)
000143 940e 033a 	CALL _lcd_gotoxy
                 ; 0000 00ED         lcd_putsf("Istirahat");
                +
000145 eca5     +LDI R26 , LOW ( 2 * _0x0 + ( 39 ) )
000146 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 39 ) )
                 	__POINTW2FN _0x0,39
000147 940e 0377 	CALL _lcd_putsf
                 ; 0000 00EE         loop3:
                 _0x24:
                 ; 0000 00EF         if(start==1)
000149 e0e1      	LDI  R30,LOW(1)
00014a 15e4      	CP   R30,R4
00014b f419      	BRNE _0x25
                 ; 0000 00F0             {
                 ; 0000 00F1             lcd_clear();
00014c 940e 0347 	CALL _lcd_clear
                 ; 0000 00F2             goto outflow;
00014e cfd9      	RJMP _0x1F
                 ; 0000 00F3             }
                 ; 0000 00F4         goto loop3;
                 _0x25:
00014f cff9      	RJMP _0x24
                 ; 0000 00F5         }
                 ; 0000 00F6 
                 ; 0000 00F7       else if(PINE.0==0)
                 _0x23:
000150 9908      	SBIC 0x1,0
000151 c012      	RJMP _0x27
                 ; 0000 00F8         {
                 ; 0000 00F9         if(add==0)
000152 2055      	TST  R5
000153 f419      	BRNE _0x28
                 ; 0000 00FA             {
                 ; 0000 00FB             lcd_clear();
000154 940e 0347 	CALL _lcd_clear
                 ; 0000 00FC             goto cycle;
000156 cf7c      	RJMP _0x6
                 ; 0000 00FD             }
                 ; 0000 00FE         else if(add>0)
                 _0x28:
000157 e0e0      	LDI  R30,LOW(0)
000158 15e5      	CP   R30,R5
000159 f448      	BRSH _0x2A
                 ; 0000 00FF             {
                 ; 0000 0100             add-=1;
00015a 945a      	DEC  R5
                 ; 0000 0101             if(add==0)
00015b 2055      	TST  R5
00015c f419      	BRNE _0x2B
                 ; 0000 0102                 {
                 ; 0000 0103                 lcd_clear();
00015d 940e 0347 	CALL _lcd_clear
                 ; 0000 0104                 goto cycle;
00015f cf73      	RJMP _0x6
                 ; 0000 0105                 }
                 ; 0000 0106             else
                 _0x2B:
                 ; 0000 0107                 {
                 ; 0000 0108                 lcd_clear();
000160 940e 0347 	CALL _lcd_clear
                 ; 0000 0109                 goto inflow;
000162 cf81      	RJMP _0xD
                 ; 0000 010A                 }
                 ; 0000 010B             }
                 ; 0000 010C         }
                 _0x2A:
                 ; 0000 010D 
                 ; 0000 010E       else
000163 c001      	RJMP _0x2D
                 _0x27:
                 ; 0000 010F         {
                 ; 0000 0110         goto outflow;
000164 cfc3      	RJMP _0x1F
                 ; 0000 0111         }
                 _0x2D:
                 ; 0000 0112 
                 ; 0000 0113       emergency:
                 _0xF:
                 ; 0000 0114       lcd_gotoxy(0,0);
000165 e0e0      	LDI  R30,LOW(0)
000166 93ea      	ST   -Y,R30
000167 e0a0      	LDI  R26,LOW(0)
000168 940e 033a 	CALL _lcd_gotoxy
                 ; 0000 0115       lcd_putsf("Emergency!!!");
                +
00016a ecaf     +LDI R26 , LOW ( 2 * _0x0 + ( 49 ) )
00016b e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 49 ) )
                 	__POINTW2FN _0x0,49
00016c 940e 0377 	CALL _lcd_putsf
                 ; 0000 0116       PORTA=0b01110000;
00016e e7e0      	LDI  R30,LOW(112)
00016f bbeb      	OUT  0x1B,R30
                 ; 0000 0117       loop4:
                 _0x2E:
                 ; 0000 0118       goto loop4;
000170 cfff      	RJMP _0x2E
                 ; 0000 0119 
                 ; 0000 011A       }
                 ; 0000 011B }
                 _0x2F:
000171 cfff      	RJMP _0x2F
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
000172 93ba      	ST   -Y,R27
000173 93aa      	ST   -Y,R26
000174 931a      	ST   -Y,R17
000175 930a      	ST   -Y,R16
000176 81aa      	LDD  R26,Y+2
000177 81bb      	LDD  R27,Y+2+1
000178 9612      	ADIW R26,2
000179 940e 0449 	CALL __GETW1P
00017b 9730      	SBIW R30,0
00017c f159      	BREQ _0x2000010
00017d 81aa      	LDD  R26,Y+2
00017e 81bb      	LDD  R27,Y+2+1
00017f 9614      	ADIW R26,4
000180 940e 0449 	CALL __GETW1P
000182 018f      	MOVW R16,R30
000183 9730      	SBIW R30,0
000184 f061      	BREQ _0x2000012
                +
000185 3002     +CPI R16 , LOW ( 2 )
000186 e0e0     +LDI R30 , HIGH ( 2 )
000187 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000188 f098      	BRLO _0x2000013
000189 01f8      	MOVW R30,R16
00018a 9731      	SBIW R30,1
00018b 018f      	MOVW R16,R30
                +
00018c 81aa     +LDD R26 , Y + 2
00018d 81bb     +LDD R27 , Y + 2 + 1
00018e 9614     +ADIW R26 , 4
00018f 93ed     +ST X + , R30
000190 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000191 81aa      	LDD  R26,Y+2
000192 81bb      	LDD  R27,Y+2+1
000193 9612      	ADIW R26,2
000194 91ed      	LD   R30,X+
000195 91fd      	LD   R31,X+
000196 9631      	ADIW R30,1
000197 93fe      	ST   -X,R31
000198 93ee      	ST   -X,R30
000199 9731      	SBIW R30,1
00019a 81ac      	LDD  R26,Y+4
00019b 83a0      	STD  Z+0,R26
                 _0x2000013:
00019c 81aa      	LDD  R26,Y+2
00019d 81bb      	LDD  R27,Y+2+1
00019e 940e 0449 	CALL __GETW1P
0001a0 23ff      	TST  R31
0001a1 f02a      	BRMI _0x2000014
0001a2 91ed      	LD   R30,X+
0001a3 91fd      	LD   R31,X+
0001a4 9631      	ADIW R30,1
0001a5 93fe      	ST   -X,R31
0001a6 93ee      	ST   -X,R30
                 _0x2000014:
0001a7 c006      	RJMP _0x2000015
                 _0x2000010:
0001a8 81aa      	LDD  R26,Y+2
0001a9 81bb      	LDD  R27,Y+2+1
0001aa efef      	LDI  R30,LOW(65535)
0001ab efff      	LDI  R31,HIGH(65535)
0001ac 93ed      	ST   X+,R30
0001ad 93fc      	ST   X,R31
                 _0x2000015:
0001ae 8119      	LDD  R17,Y+1
0001af 8108      	LDD  R16,Y+0
0001b0 9625      	ADIW R28,5
0001b1 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
0001b2 93ba      	ST   -Y,R27
0001b3 93aa      	ST   -Y,R26
0001b4 9726      	SBIW R28,6
0001b5 940e 0456 	CALL __SAVELOCR6
0001b7 e010      	LDI  R17,0
0001b8 85ac      	LDD  R26,Y+12
0001b9 85bd      	LDD  R27,Y+12+1
0001ba e0e0      	LDI  R30,LOW(0)
0001bb e0f0      	LDI  R31,HIGH(0)
0001bc 93ed      	ST   X+,R30
0001bd 93fc      	ST   X,R31
                 _0x2000016:
0001be 89ea      	LDD  R30,Y+18
0001bf 89fb      	LDD  R31,Y+18+1
0001c0 9631      	ADIW R30,1
0001c1 8bea      	STD  Y+18,R30
0001c2 8bfb      	STD  Y+18+1,R31
0001c3 9731      	SBIW R30,1
0001c4 91e4      	LPM  R30,Z
0001c5 2f2e      	MOV  R18,R30
0001c6 30e0      	CPI  R30,0
0001c7 f409      	BRNE PC+2
0001c8 c115      	RJMP _0x2000018
0001c9 2fe1      	MOV  R30,R17
0001ca 30e0      	CPI  R30,0
0001cb f439      	BRNE _0x200001C
0001cc 3225      	CPI  R18,37
0001cd f411      	BRNE _0x200001D
0001ce e011      	LDI  R17,LOW(1)
0001cf c002      	RJMP _0x200001E
                 _0x200001D:
0001d0 940e 03fd 	CALL SUBOPT_0x3
                 _0x200001E:
0001d2 c10a      	RJMP _0x200001B
                 _0x200001C:
0001d3 30e1      	CPI  R30,LOW(0x1)
0001d4 f4a9      	BRNE _0x200001F
0001d5 3225      	CPI  R18,37
0001d6 f419      	BRNE _0x2000020
0001d7 940e 03fd 	CALL SUBOPT_0x3
0001d9 c102      	RJMP _0x20000CC
                 _0x2000020:
0001da e012      	LDI  R17,LOW(2)
0001db e040      	LDI  R20,LOW(0)
0001dc e000      	LDI  R16,LOW(0)
0001dd 322d      	CPI  R18,45
0001de f411      	BRNE _0x2000021
0001df e001      	LDI  R16,LOW(1)
0001e0 c0fc      	RJMP _0x200001B
                 _0x2000021:
0001e1 322b      	CPI  R18,43
0001e2 f411      	BRNE _0x2000022
0001e3 e24b      	LDI  R20,LOW(43)
0001e4 c0f8      	RJMP _0x200001B
                 _0x2000022:
0001e5 3220      	CPI  R18,32
0001e6 f411      	BRNE _0x2000023
0001e7 e240      	LDI  R20,LOW(32)
0001e8 c0f4      	RJMP _0x200001B
                 _0x2000023:
0001e9 c002      	RJMP _0x2000024
                 _0x200001F:
0001ea 30e2      	CPI  R30,LOW(0x2)
0001eb f439      	BRNE _0x2000025
                 _0x2000024:
0001ec e050      	LDI  R21,LOW(0)
0001ed e013      	LDI  R17,LOW(3)
0001ee 3320      	CPI  R18,48
0001ef f411      	BRNE _0x2000026
0001f0 6800      	ORI  R16,LOW(128)
0001f1 c0eb      	RJMP _0x200001B
                 _0x2000026:
0001f2 c003      	RJMP _0x2000027
                 _0x2000025:
0001f3 30e3      	CPI  R30,LOW(0x3)
0001f4 f009      	BREQ PC+2
0001f5 c0e7      	RJMP _0x200001B
                 _0x2000027:
0001f6 3320      	CPI  R18,48
0001f7 f010      	BRLO _0x200002A
0001f8 332a      	CPI  R18,58
0001f9 f008      	BRLO _0x200002B
                 _0x200002A:
0001fa c007      	RJMP _0x2000029
                 _0x200002B:
0001fb e0aa      	LDI  R26,LOW(10)
0001fc 9f5a      	MUL  R21,R26
0001fd 2d50      	MOV  R21,R0
0001fe 2fe2      	MOV  R30,R18
0001ff 53e0      	SUBI R30,LOW(48)
000200 0f5e      	ADD  R21,R30
000201 c0db      	RJMP _0x200001B
                 _0x2000029:
000202 2fe2      	MOV  R30,R18
000203 36e3      	CPI  R30,LOW(0x63)
000204 f449      	BRNE _0x200002F
000205 940e 0404 	CALL SUBOPT_0x4
000207 89e8      	LDD  R30,Y+16
000208 89f9      	LDD  R31,Y+16+1
000209 81a4      	LDD  R26,Z+4
00020a 93aa      	ST   -Y,R26
00020b 940e 040a 	CALL SUBOPT_0x5
00020d c0ce      	RJMP _0x2000030
                 _0x200002F:
00020e 37e3      	CPI  R30,LOW(0x73)
00020f f441      	BRNE _0x2000032
000210 940e 0404 	CALL SUBOPT_0x4
000212 940e 0410 	CALL SUBOPT_0x6
000214 940e 03b8 	CALL _strlen
000216 2f1e      	MOV  R17,R30
000217 c00a      	RJMP _0x2000033
                 _0x2000032:
000218 37e0      	CPI  R30,LOW(0x70)
000219 f461      	BRNE _0x2000035
00021a 940e 0404 	CALL SUBOPT_0x4
00021c 940e 0410 	CALL SUBOPT_0x6
00021e 940e 03c4 	CALL _strlenf
000220 2f1e      	MOV  R17,R30
000221 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000222 6002      	ORI  R16,LOW(2)
000223 770f      	ANDI R16,LOW(127)
000224 e030      	LDI  R19,LOW(0)
000225 c034      	RJMP _0x2000036
                 _0x2000035:
000226 36e4      	CPI  R30,LOW(0x64)
000227 f011      	BREQ _0x2000039
000228 36e9      	CPI  R30,LOW(0x69)
000229 f411      	BRNE _0x200003A
                 _0x2000039:
00022a 6004      	ORI  R16,LOW(4)
00022b c002      	RJMP _0x200003B
                 _0x200003A:
00022c 37e5      	CPI  R30,LOW(0x75)
00022d f431      	BRNE _0x200003C
                 _0x200003B:
00022e e8ec      	LDI  R30,LOW(_tbl10_G100*2)
00022f e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000230 83ee      	STD  Y+6,R30
000231 83ff      	STD  Y+6+1,R31
000232 e015      	LDI  R17,LOW(5)
000233 c00c      	RJMP _0x200003D
                 _0x200003C:
000234 35e8      	CPI  R30,LOW(0x58)
000235 f411      	BRNE _0x200003F
000236 6008      	ORI  R16,LOW(8)
000237 c003      	RJMP _0x2000040
                 _0x200003F:
000238 37e8      	CPI  R30,LOW(0x78)
000239 f009      	BREQ PC+2
00023a c0a1      	RJMP _0x2000071
                 _0x2000040:
00023b e9e6      	LDI  R30,LOW(_tbl16_G100*2)
00023c e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
00023d 83ee      	STD  Y+6,R30
00023e 83ff      	STD  Y+6+1,R31
00023f e014      	LDI  R17,LOW(4)
                 _0x200003D:
000240 ff02      	SBRS R16,2
000241 c014      	RJMP _0x2000042
000242 940e 0404 	CALL SUBOPT_0x4
000244 940e 041a 	CALL SUBOPT_0x7
000246 85ab      	LDD  R26,Y+11
000247 23aa      	TST  R26
000248 f43a      	BRPL _0x2000043
000249 85ea      	LDD  R30,Y+10
00024a 85fb      	LDD  R31,Y+10+1
00024b 940e 0445 	CALL __ANEGW1
00024d 87ea      	STD  Y+10,R30
00024e 87fb      	STD  Y+10+1,R31
00024f e24d      	LDI  R20,LOW(45)
                 _0x2000043:
000250 3040      	CPI  R20,0
000251 f011      	BREQ _0x2000044
000252 5f1f      	SUBI R17,-LOW(1)
000253 c001      	RJMP _0x2000045
                 _0x2000044:
000254 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000255 c004      	RJMP _0x2000046
                 _0x2000042:
000256 940e 0404 	CALL SUBOPT_0x4
000258 940e 041a 	CALL SUBOPT_0x7
                 _0x2000046:
                 _0x2000036:
00025a fd00      	SBRC R16,0
00025b c011      	RJMP _0x2000047
                 _0x2000048:
00025c 1715      	CP   R17,R21
00025d f478      	BRSH _0x200004A
00025e ff07      	SBRS R16,7
00025f c008      	RJMP _0x200004B
000260 ff02      	SBRS R16,2
000261 c004      	RJMP _0x200004C
000262 7f0b      	ANDI R16,LOW(251)
000263 2f24      	MOV  R18,R20
000264 5011      	SUBI R17,LOW(1)
000265 c001      	RJMP _0x200004D
                 _0x200004C:
000266 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000267 c001      	RJMP _0x200004E
                 _0x200004B:
000268 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000269 940e 03fd 	CALL SUBOPT_0x3
00026b 5051      	SUBI R21,LOW(1)
00026c cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
00026d 2f31      	MOV  R19,R17
00026e ff01      	SBRS R16,1
00026f c017      	RJMP _0x200004F
                 _0x2000050:
000270 3030      	CPI  R19,0
000271 f0a1      	BREQ _0x2000052
000272 ff03      	SBRS R16,3
000273 c006      	RJMP _0x2000053
000274 81ee      	LDD  R30,Y+6
000275 81ff      	LDD  R31,Y+6+1
000276 9125      	LPM  R18,Z+
000277 83ee      	STD  Y+6,R30
000278 83ff      	STD  Y+6+1,R31
000279 c005      	RJMP _0x2000054
                 _0x2000053:
00027a 81ae      	LDD  R26,Y+6
00027b 81bf      	LDD  R27,Y+6+1
00027c 912d      	LD   R18,X+
00027d 83ae      	STD  Y+6,R26
00027e 83bf      	STD  Y+6+1,R27
                 _0x2000054:
00027f 940e 03fd 	CALL SUBOPT_0x3
000281 3050      	CPI  R21,0
000282 f009      	BREQ _0x2000055
000283 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000284 5031      	SUBI R19,LOW(1)
000285 cfea      	RJMP _0x2000050
                 _0x2000052:
000286 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000287 e320      	LDI  R18,LOW(48)
000288 81ee      	LDD  R30,Y+6
000289 81ff      	LDD  R31,Y+6+1
00028a 940e 044d 	CALL __GETW1PF
00028c 87e8      	STD  Y+8,R30
00028d 87f9      	STD  Y+8+1,R31
00028e 81ee      	LDD  R30,Y+6
00028f 81ff      	LDD  R31,Y+6+1
000290 9632      	ADIW R30,2
000291 83ee      	STD  Y+6,R30
000292 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000293 85e8      	LDD  R30,Y+8
000294 85f9      	LDD  R31,Y+8+1
000295 85aa      	LDD  R26,Y+10
000296 85bb      	LDD  R27,Y+10+1
000297 17ae      	CP   R26,R30
000298 07bf      	CPC  R27,R31
000299 f050      	BRLO _0x200005C
00029a 5f2f      	SUBI R18,-LOW(1)
00029b 85a8      	LDD  R26,Y+8
00029c 85b9      	LDD  R27,Y+8+1
00029d 85ea      	LDD  R30,Y+10
00029e 85fb      	LDD  R31,Y+10+1
00029f 1bea      	SUB  R30,R26
0002a0 0bfb      	SBC  R31,R27
0002a1 87ea      	STD  Y+10,R30
0002a2 87fb      	STD  Y+10+1,R31
0002a3 cfef      	RJMP _0x200005A
                 _0x200005C:
0002a4 332a      	CPI  R18,58
0002a5 f028      	BRLO _0x200005D
0002a6 ff03      	SBRS R16,3
0002a7 c002      	RJMP _0x200005E
0002a8 5f29      	SUBI R18,-LOW(7)
0002a9 c001      	RJMP _0x200005F
                 _0x200005E:
0002aa 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
0002ab fd04      	SBRC R16,4
0002ac c01a      	RJMP _0x2000061
0002ad 3321      	CPI  R18,49
0002ae f420      	BRSH _0x2000063
0002af 85a8      	LDD  R26,Y+8
0002b0 85b9      	LDD  R27,Y+8+1
0002b1 9711      	SBIW R26,1
0002b2 f409      	BRNE _0x2000062
                 _0x2000063:
0002b3 c009      	RJMP _0x20000CD
                 _0x2000062:
0002b4 1753      	CP   R21,R19
0002b5 f010      	BRLO _0x2000067
0002b6 ff00      	SBRS R16,0
0002b7 c001      	RJMP _0x2000068
                 _0x2000067:
0002b8 c013      	RJMP _0x2000066
                 _0x2000068:
0002b9 e220      	LDI  R18,LOW(32)
0002ba ff07      	SBRS R16,7
0002bb c00b      	RJMP _0x2000069
0002bc e320      	LDI  R18,LOW(48)
                 _0x20000CD:
0002bd 6100      	ORI  R16,LOW(16)
0002be ff02      	SBRS R16,2
0002bf c007      	RJMP _0x200006A
0002c0 7f0b      	ANDI R16,LOW(251)
0002c1 934a      	ST   -Y,R20
0002c2 940e 040a 	CALL SUBOPT_0x5
0002c4 3050      	CPI  R21,0
0002c5 f009      	BREQ _0x200006B
0002c6 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0002c7 940e 03fd 	CALL SUBOPT_0x3
0002c9 3050      	CPI  R21,0
0002ca f009      	BREQ _0x200006C
0002cb 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0002cc 5031      	SUBI R19,LOW(1)
0002cd 85a8      	LDD  R26,Y+8
0002ce 85b9      	LDD  R27,Y+8+1
0002cf 9712      	SBIW R26,2
0002d0 f008      	BRLO _0x2000059
0002d1 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0002d2 ff00      	SBRS R16,0
0002d3 c008      	RJMP _0x200006D
                 _0x200006E:
0002d4 3050      	CPI  R21,0
0002d5 f031      	BREQ _0x2000070
0002d6 5051      	SUBI R21,LOW(1)
0002d7 e2e0      	LDI  R30,LOW(32)
0002d8 93ea      	ST   -Y,R30
0002d9 940e 040a 	CALL SUBOPT_0x5
0002db cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0002dc e010      	LDI  R17,LOW(0)
                 _0x200001B:
0002dd cee0      	RJMP _0x2000016
                 _0x2000018:
0002de 85ac      	LDD  R26,Y+12
0002df 85bd      	LDD  R27,Y+12+1
0002e0 940e 0449 	CALL __GETW1P
0002e2 940e 045d 	CALL __LOADLOCR6
0002e4 9664      	ADIW R28,20
0002e5 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0002e6 92ff      	PUSH R15
0002e7 2ef8      	MOV  R15,R24
0002e8 9726      	SBIW R28,6
0002e9 940e 0458 	CALL __SAVELOCR4
0002eb 940e 0422 	CALL SUBOPT_0x8
0002ed 9730      	SBIW R30,0
0002ee f419      	BRNE _0x2000072
0002ef efef      	LDI  R30,LOW(65535)
0002f0 efff      	LDI  R31,HIGH(65535)
0002f1 c023      	RJMP _0x2080003
                 _0x2000072:
0002f2 01de      	MOVW R26,R28
0002f3 9616      	ADIW R26,6
0002f4 940e 0441 	CALL __ADDW2R15
0002f6 018d      	MOVW R16,R26
0002f7 940e 0422 	CALL SUBOPT_0x8
0002f9 83ee      	STD  Y+6,R30
0002fa 83ff      	STD  Y+6+1,R31
0002fb e0e0      	LDI  R30,LOW(0)
0002fc 87e8      	STD  Y+8,R30
0002fd 87e9      	STD  Y+8+1,R30
0002fe 01de      	MOVW R26,R28
0002ff 961a      	ADIW R26,10
000300 940e 0441 	CALL __ADDW2R15
000302 940e 0449 	CALL __GETW1P
000304 93fa      	ST   -Y,R31
000305 93ea      	ST   -Y,R30
000306 931a      	ST   -Y,R17
000307 930a      	ST   -Y,R16
000308 e7e2      	LDI  R30,LOW(_put_buff_G100)
000309 e0f1      	LDI  R31,HIGH(_put_buff_G100)
00030a 93fa      	ST   -Y,R31
00030b 93ea      	ST   -Y,R30
00030c 01de      	MOVW R26,R28
00030d 961a      	ADIW R26,10
00030e dea3      	RCALL __print_G100
00030f 019f      	MOVW R18,R30
000310 81ae      	LDD  R26,Y+6
000311 81bf      	LDD  R27,Y+6+1
000312 e0e0      	LDI  R30,LOW(0)
000313 93ec      	ST   X,R30
000314 01f9      	MOVW R30,R18
                 _0x2080003:
000315 940e 045f 	CALL __LOADLOCR4
000317 962a      	ADIW R28,10
000318 90ff      	POP  R15
000319 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
00031a 93aa      	ST   -Y,R26
00031b b3e5      	IN   R30,0x15
00031c 70ef      	ANDI R30,LOW(0xF)
00031d 2fae      	MOV  R26,R30
00031e 81e8      	LD   R30,Y
00031f 7fe0      	ANDI R30,LOW(0xF0)
000320 2bea      	OR   R30,R26
000321 bbe5      	OUT  0x15,R30
                +
000322 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
000323 958a     +DEC R24
000324 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
000325 9aa9      	SBI  0x15,1
                +
000326 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
000327 958a     +DEC R24
000328 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
000329 98a9      	CBI  0x15,1
                +
00032a e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
00032b 958a     +DEC R24
00032c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
00032d c088      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00032e 93aa      	ST   -Y,R26
00032f 81a8      	LD   R26,Y
000330 dfe9      	RCALL __lcd_write_nibble_G101
000331 81e8          ld    r30,y
000332 95e2          swap  r30
000333 83e8          st    y,r30
000334 81a8      	LD   R26,Y
000335 dfe4      	RCALL __lcd_write_nibble_G101
                +
000336 ea87     +LDI R24 , LOW ( 167 )
                +__DELAY_USB_LOOP :
000337 958a     +DEC R24
000338 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 167
000339 c07c      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00033a 93aa      	ST   -Y,R26
00033b 81e8      	LD   R30,Y
00033c e0f0      	LDI  R31,0
00033d 50e0      	SUBI R30,LOW(-__base_y_G101)
00033e 4ffb      	SBCI R31,HIGH(-__base_y_G101)
00033f 81e0      	LD   R30,Z
000340 81a9      	LDD  R26,Y+1
000341 0fae      	ADD  R26,R30
000342 dfeb      	RCALL __lcd_write_data
000343 8069      	LDD  R6,Y+1
000344 8098      	LDD  R9,Y+0
000345 9622      	ADIW R28,2
000346 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000347 e0a2      	LDI  R26,LOW(2)
000348 940e 0429 	CALL SUBOPT_0x9
00034a e0ac      	LDI  R26,LOW(12)
00034b dfe2      	RCALL __lcd_write_data
00034c e0a1      	LDI  R26,LOW(1)
00034d 940e 0429 	CALL SUBOPT_0x9
00034f e0e0      	LDI  R30,LOW(0)
000350 2e9e      	MOV  R9,R30
000351 2e6e      	MOV  R6,R30
000352 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000353 93aa      	ST   -Y,R26
000354 81a8      	LD   R26,Y
000355 30aa      	CPI  R26,LOW(0xA)
000356 f011      	BREQ _0x2020005
000357 1468      	CP   R6,R8
000358 f048      	BRLO _0x2020004
                 _0x2020005:
000359 e0e0      	LDI  R30,LOW(0)
00035a 93ea      	ST   -Y,R30
00035b 9493      	INC  R9
00035c 2da9      	MOV  R26,R9
00035d dfdc      	RCALL _lcd_gotoxy
00035e 81a8      	LD   R26,Y
00035f 30aa      	CPI  R26,LOW(0xA)
000360 f409      	BRNE _0x2020007
000361 c054      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
000362 9463      	INC  R6
000363 9aa8      	SBI  0x15,0
000364 81a8      	LD   R26,Y
000365 dfc8      	RCALL __lcd_write_data
000366 98a8      	CBI  0x15,0
000367 c04e      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000368 93ba      	ST   -Y,R27
000369 93aa      	ST   -Y,R26
00036a 931a      	ST   -Y,R17
                 _0x2020008:
00036b 81a9      	LDD  R26,Y+1
00036c 81ba      	LDD  R27,Y+1+1
00036d 91ed      	LD   R30,X+
00036e 83a9      	STD  Y+1,R26
00036f 83ba      	STD  Y+1+1,R27
000370 2f1e      	MOV  R17,R30
000371 30e0      	CPI  R30,0
000372 f019      	BREQ _0x202000A
000373 2fa1      	MOV  R26,R17
000374 dfde      	RCALL _lcd_putchar
000375 cff5      	RJMP _0x2020008
                 _0x202000A:
000376 c010      	RJMP _0x2080002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000377 93ba      	ST   -Y,R27
000378 93aa      	ST   -Y,R26
000379 931a      	ST   -Y,R17
                 _0x202000B:
00037a 81e9      	LDD  R30,Y+1
00037b 81fa      	LDD  R31,Y+1+1
00037c 9631      	ADIW R30,1
00037d 83e9      	STD  Y+1,R30
00037e 83fa      	STD  Y+1+1,R31
00037f 9731      	SBIW R30,1
000380 91e4      	LPM  R30,Z
000381 2f1e      	MOV  R17,R30
000382 30e0      	CPI  R30,0
000383 f019      	BREQ _0x202000D
000384 2fa1      	MOV  R26,R17
000385 dfcd      	RCALL _lcd_putchar
000386 cff3      	RJMP _0x202000B
                 _0x202000D:
                 _0x2080002:
000387 8118      	LDD  R17,Y+0
000388 9623      	ADIW R28,3
000389 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00038a 93aa      	ST   -Y,R26
00038b b3e4      	IN   R30,0x14
00038c 6fe0      	ORI  R30,LOW(0xF0)
00038d bbe4      	OUT  0x14,R30
00038e 9aa1      	SBI  0x14,1
00038f 9aa0      	SBI  0x14,0
000390 9aa2      	SBI  0x14,2
000391 98a9      	CBI  0x15,1
000392 98a8      	CBI  0x15,0
000393 98aa      	CBI  0x15,2
000394 8088      	LDD  R8,Y+0
000395 81e8      	LD   R30,Y
000396 58e0      	SUBI R30,-LOW(128)
                +
000397 93e0 0502+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000399 81e8      	LD   R30,Y
00039a 54e0      	SUBI R30,-LOW(192)
                +
00039b 93e0 0503+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
00039d e1a4      	LDI  R26,LOW(20)
00039e e0b0      	LDI  R27,0
00039f 940e 0437 	CALL _delay_ms
0003a1 940e 042f 	CALL SUBOPT_0xA
0003a3 940e 042f 	CALL SUBOPT_0xA
0003a5 940e 042f 	CALL SUBOPT_0xA
0003a7 e2a0      	LDI  R26,LOW(32)
0003a8 df71      	RCALL __lcd_write_nibble_G101
                +
0003a9 ef8a     +LDI R24 , LOW ( 250 )
0003aa e090     +LDI R25 , HIGH ( 250 )
                +__DELAY_USW_LOOP :
0003ab 9701     +SBIW R24 , 1
0003ac f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 250
0003ad e2a8      	LDI  R26,LOW(40)
0003ae df7f      	RCALL __lcd_write_data
0003af e0a4      	LDI  R26,LOW(4)
0003b0 df7d      	RCALL __lcd_write_data
0003b1 e8a5      	LDI  R26,LOW(133)
0003b2 df7b      	RCALL __lcd_write_data
0003b3 e0a6      	LDI  R26,LOW(6)
0003b4 df79      	RCALL __lcd_write_data
0003b5 df91      	RCALL _lcd_clear
                 _0x2080001:
0003b6 9621      	ADIW R28,1
0003b7 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0003b8 93ba      	ST   -Y,R27
0003b9 93aa      	ST   -Y,R26
0003ba 91a9          ld   r26,y+
0003bb 91b9          ld   r27,y+
0003bc 27ee          clr  r30
0003bd 27ff          clr  r31
                 strlen0:
0003be 916d          ld   r22,x+
0003bf 2366          tst  r22
0003c0 f011          breq strlen1
0003c1 9631          adiw r30,1
0003c2 cffb          rjmp strlen0
                 strlen1:
0003c3 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0003c4 93ba      	ST   -Y,R27
0003c5 93aa      	ST   -Y,R26
0003c6 27aa          clr  r26
0003c7 27bb          clr  r27
0003c8 91e9          ld   r30,y+
0003c9 91f9          ld   r31,y+
                 strlenf0:
0003ca 9005      	lpm  r0,z+
0003cb 2000          tst  r0
0003cc f011          breq strlenf1
0003cd 9611          adiw r26,1
0003ce cffb          rjmp strlenf0
                 strlenf1:
0003cf 01fd          movw r30,r26
0003d0 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G101:
000500           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:72 WORDS
                 SUBOPT_0x0:
0003d1 01fe      	MOVW R30,R28
0003d2 93fa      	ST   -Y,R31
0003d3 93ea      	ST   -Y,R30
                +
0003d4 e9ee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0003d5 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0003d6 93fa      	ST   -Y,R31
0003d7 93ea      	ST   -Y,R30
0003d8 2de5      	MOV  R30,R5
0003d9 27ff      	CLR  R31
0003da 2766      	CLR  R22
0003db 2777      	CLR  R23
0003dc 940e 0451 	CALL __PUTPARD1
0003de e084      	LDI  R24,4
0003df 940e 02e6 	CALL _sprintf
0003e1 9628      	ADIW R28,8
0003e2 e0e0      	LDI  R30,LOW(0)
0003e3 93ea      	ST   -Y,R30
0003e4 e0a0      	LDI  R26,LOW(0)
0003e5 940e 033a 	CALL _lcd_gotoxy
0003e7 01de      	MOVW R26,R28
0003e8 940c 0368 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
0003ea e0e0      	LDI  R30,LOW(0)
0003eb 93ea      	ST   -Y,R30
0003ec e0a1      	LDI  R26,LOW(1)
0003ed 940c 033a 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
0003ef 2444      	CLR  R4
0003f0 e1e0      	LDI  R30,LOW(16)
0003f1 bbeb      	OUT  0x1B,R30
0003f2 940e 0347 	CALL _lcd_clear
0003f4 e0e0      	LDI  R30,LOW(0)
0003f5 93ea      	ST   -Y,R30
0003f6 e0a0      	LDI  R26,LOW(0)
0003f7 940e 033a 	CALL _lcd_gotoxy
                +
0003f9 eba3     +LDI R26 , LOW ( 2 * _0x0 + ( 21 ) )
0003fa e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 21 ) )
                 	__POINTW2FN _0x0,21
0003fb 940c 0377 	JMP  _lcd_putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
0003fd 932a      	ST   -Y,R18
0003fe 85ad      	LDD  R26,Y+13
0003ff 85be      	LDD  R27,Y+13+1
000400 85ef      	LDD  R30,Y+15
000401 89f8      	LDD  R31,Y+15+1
000402 9509      	ICALL
000403 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
000404 89e8      	LDD  R30,Y+16
000405 89f9      	LDD  R31,Y+16+1
000406 9734      	SBIW R30,4
000407 8be8      	STD  Y+16,R30
000408 8bf9      	STD  Y+16+1,R31
000409 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
00040a 85ad      	LDD  R26,Y+13
00040b 85be      	LDD  R27,Y+13+1
00040c 85ef      	LDD  R30,Y+15
00040d 89f8      	LDD  R31,Y+15+1
00040e 9509      	ICALL
00040f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
000410 89a8      	LDD  R26,Y+16
000411 89b9      	LDD  R27,Y+16+1
000412 9614      	ADIW R26,4
000413 940e 0449 	CALL __GETW1P
000415 83ee      	STD  Y+6,R30
000416 83ff      	STD  Y+6+1,R31
000417 81ae      	LDD  R26,Y+6
000418 81bf      	LDD  R27,Y+6+1
000419 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
00041a 89a8      	LDD  R26,Y+16
00041b 89b9      	LDD  R27,Y+16+1
00041c 9614      	ADIW R26,4
00041d 940e 0449 	CALL __GETW1P
00041f 87ea      	STD  Y+10,R30
000420 87fb      	STD  Y+10+1,R31
000421 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000422 01de      	MOVW R26,R28
000423 961c      	ADIW R26,12
000424 940e 0441 	CALL __ADDW2R15
000426 940e 0449 	CALL __GETW1P
000428 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
000429 940e 032e 	CALL __lcd_write_data
00042b e0a3      	LDI  R26,LOW(3)
00042c e0b0      	LDI  R27,0
00042d 940c 0437 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xA:
00042f e3a0      	LDI  R26,LOW(48)
000430 940e 031a 	CALL __lcd_write_nibble_G101
                +
000432 ef8a     +LDI R24 , LOW ( 250 )
000433 e090     +LDI R25 , HIGH ( 250 )
                +__DELAY_USW_LOOP :
000434 9701     +SBIW R24 , 1
000435 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 250
000436 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000437 9610      	adiw r26,0
000438 f039      	breq __delay_ms1
                 __delay_ms0:
000439 95a8      	wdr
                +
00043a ec84     +LDI R24 , LOW ( 0x9C4 )
00043b e099     +LDI R25 , HIGH ( 0x9C4 )
                +__DELAY_USW_LOOP :
00043c 9701     +SBIW R24 , 1
00043d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x9C4
00043e 9711      	sbiw r26,1
00043f f7c9      	brne __delay_ms0
                 __delay_ms1:
000440 9508      	ret
                 
                 __ADDW2R15:
000441 2400      	CLR  R0
000442 0daf      	ADD  R26,R15
000443 1db0      	ADC  R27,R0
000444 9508      	RET
                 
                 __ANEGW1:
000445 95f1      	NEG  R31
000446 95e1      	NEG  R30
000447 40f0      	SBCI R31,0
000448 9508      	RET
                 
                 __GETW1P:
000449 91ed      	LD   R30,X+
00044a 91fc      	LD   R31,X
00044b 9711      	SBIW R26,1
00044c 9508      	RET
                 
                 __GETW1PF:
00044d 9005      	LPM  R0,Z+
00044e 91f4      	LPM  R31,Z
00044f 2de0      	MOV  R30,R0
000450 9508      	RET
                 
                 __PUTPARD1:
000451 937a      	ST   -Y,R23
000452 936a      	ST   -Y,R22
000453 93fa      	ST   -Y,R31
000454 93ea      	ST   -Y,R30
000455 9508      	RET
                 
                 __SAVELOCR6:
000456 935a      	ST   -Y,R21
                 __SAVELOCR5:
000457 934a      	ST   -Y,R20
                 __SAVELOCR4:
000458 933a      	ST   -Y,R19
                 __SAVELOCR3:
000459 932a      	ST   -Y,R18
                 __SAVELOCR2:
00045a 931a      	ST   -Y,R17
00045b 930a      	ST   -Y,R16
00045c 9508      	RET
                 
                 __LOADLOCR6:
00045d 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00045e 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00045f 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000460 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000461 8119      	LDD  R17,Y+1
000462 8108      	LD   R16,Y
000463 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :  15 r5 :   9 r6 :   4 r7 :   5 
r8 :   2 r9 :   4 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  34 r17:  27 r18:  29 r19:   8 r20:   9 r21:  17 r22:   6 r23:   2 
r24:  24 r25:   5 r26: 109 r27:  44 r28:  17 r29:   1 r30: 227 r31:  59 
x  :  23 y  : 183 z  :  16 
Registers used: 28 out of 35 (80.0%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   3 
adiw  :  25 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  18 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   9 
brlt  :   0 brmi  :   1 brne  :  43 brpl  :   1 brsh  :   3 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  81 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  19 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :  12 cpc   :   2 cpi   :  34 cpse  :   0 dec   :   6 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   5 inc   :   3 jmp   :  40 ld    :  27 ldd   :  79 
ldi   : 128 lds   :   0 lpm   :  16 lsl   :   0 lsr   :   0 mov   :  22 
movw  :  16 mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 
or    :   1 ori   :   7 out   :  27 pop   :   1 push  :   1 rcall :  15 
ret   :  24 reti  :   2 rjmp  :  86 rol   :   0 ror   :   0 sbc   :   1 
sbci  :   2 sbi   :   5 sbic  :   2 sbis  :   1 sbiw  :  21 sbr   :   0 
sbrc  :   2 sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  70 std   :  33 sts   :   4 sub   :   1 subi  :  16 
swap  :   1 tst   :  11 wdr   :   1 
Instructions used: 56 out of 117 (47.9%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0008c8   2158     90   2248  131072   1.7%
[.dseg] 0x000100 0x000504      0      4      4    4096   0.1%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 6 warnings
